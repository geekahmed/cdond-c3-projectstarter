version: 2.1
orbs:
  slack: circleci/slack@4.3.3  

commands:
  destroy-environment:
    description: Destroy Cloud Formation Stacks and infrastructure
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend cloudformation stack
          command: |
            aws cloudformation delete-stack --stack-name backend-<< parameters.id >>
          when: << parameters.when >>
      - run:
          name: Destroy udapeople frontend cloudformation stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
            aws cloudformation delete-stack --stack-name frontend-<< parameters.id >>
          when: << parameters.when >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string    
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend          
          # Add when this will run
          when: << parameters.when >>          
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: 6b5676e5-3333-4c24-a5b1-5ba0040235b0" --request GET https://api.memstash.io/values/DB_MIGRATION_<< parameters.id >>)
            if [[ "$SUCCESS" == "success" ]]
            then
              npm run migrations:revert
            fi

jobs:
  backend-deps:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules


  frontend-deps:
    docker:
      - image: circleci/node:13.8.0
    steps:
        - checkout
        - run:
            name: npm install
            working_directory: ./frontend
            command: npm install
        - persist_to_workspace:
            root: .
            paths:
              - frontend/node_modules


  build-backend:
    docker:
      - image: circleci/node:13.8.0  
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm run build
          working_directory: ./backend
          command: npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist


  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm run build
          working_directory: ./frontend
          command: npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run Front-End Tests
          working_directory: ./frontend
          command: npm test -- --ci --runInBand


  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run Back-End Tests
          working_directory: ./backend
          command: npm test -- --ci --runInBand
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check Frontend against security vulnerabilities
          working_directory: ./frontend
          command: npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check Backend against security vulnerabilities
          working_directory: ./backend
          command: npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar utility
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=backend-${CIRCLE_WORKFLOW_ID} \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Save backend URL in memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --output text)
            curl -H "Content-Type: text/plain" -H "token: 6b5676e5-3333-4c24-a5b1-5ba0040235b0" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/BACKEND_URL

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=frontend-${CIRCLE_WORKFLOW_ID} \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --output text >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail


  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.9.0-alpine      
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["dd:90:70:58:b1:e1:7c:62:0d:6a:ff:db:9f:46:0e:de"]
      # attach workspace
      - attach_workspace:
          at: .      
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
            pip install awscli
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory.txt configure-server.yml

      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWSCLI
          working_directory: /temp
          command: |
            sudo apt-get update -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install     
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm run migrations > migration_status
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "DB migration was successful, will update memstash..."
              curl -H "Content-Type: text/plain" -H "token: f9f8f99b-efab-4fb2-8085-ed902b2b4bb2" --request PUT --data "success" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl -H "Content-Type: text/plain" -H "token: f9f8f99b-efab-4fb2-8085-ed902b2b4bb2" --request PUT --data "failure" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID}"
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail   

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0     
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .      
      - run:
          name: Install AWSCLI
          working_directory: /temp
          command: |
            sudo apt-get update -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export API_URL=$(curl -H "token: 6b5676e5-3333-4c24-a5b1-5ba0040235b0" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo "${API_URL}"
      - run:
          name: Build Front-end with the new backend url
          working_directory: ./frontend
          command: npm run build

      - run:
          name: Deploy frontend objects
          working_directory: ./frontend          
          command: |
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --recursive
      
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist      
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail                    
  
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.9.0-alpine      
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: ["dd:90:70:58:b1:e1:7c:62:0d:6a:ff:db:9f:46:0e:de"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            pip install awscli
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          working_directory: ./backend
          command: |
            export BACKEND_URL=$(curl -H "token: 6b5676e5-3333-4c24-a5b1-5ba0040235b0" --request GET https://api.memstash.io/values/BACKEND_URL)
            curl "$BACKEND_URL/api/status"
      - run:
          name: Frontend smoke test.
          working_directory: ./backend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website.use-west-2.amazonaws.com/index.html"
            curl -s ${URL} | grep -q "Welcome"
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
  
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli      
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs

      - run:
          name: Store old WorkflowID in memstash for cleanup phase
          working_directory: ./.circleci/files
          command: |
            WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token: c3cb5010-0819-43ec-849f-0980bc10460f" --request PUT --data "$WorkflowID" https://api.memstash.io/values/WorkflowID
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yaml \
              --stack-name udapeople-cloudfront-ohlolcfuiv \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
              --tags project=udapeople
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            OldWorkflowID=$(curl -H "token: c3cb5010-0819-43ec-849f-0980bc10460f" --request GET https://api.memstash.io/values/WorkflowID)
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID}
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then
              echo "$OldWorkflowID!=$CurrentWorkflowID => older version will be deleted"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
            else
              echo "$OldWorkflowID==$CurrentWorkflowID => nothing new"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]